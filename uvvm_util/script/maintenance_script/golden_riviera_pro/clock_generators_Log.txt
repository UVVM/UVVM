UVVM: ID_UTIL_SETUP                      0.0 ns  TB seq.                        Sub-program randomise is outdated and has been replaced by another sub-program.
UVVM:                                                                           Use randomize().
UVVM: ID_UTIL_SETUP                      0.0 ns  TB seq.                        Setting global seeds to 12, 14
UVVM: ID_UTIL_SETUP                      0.0 ns  TB seq.                        Setting global seeds to 14, 12
UVVM:      
UVVM:      --------------------------------------------------------------------------------------------------------------------------------------------------------------------
UVVM:      ***  REPORT OF GLOBAL CTRL ***
UVVM:      --------------------------------------------------------------------------------------------------------------------------------------------------------------------
UVVM:                                IGNORE    STOP_LIMIT
UVVM:                NOTE         :  REGARD         0
UVVM:                TB_NOTE      :  REGARD         0
UVVM:                WARNING      :  REGARD         0
UVVM:                TB_WARNING   :  REGARD         0
UVVM:                MANUAL_CHECK :  REGARD         0
UVVM:                ERROR        :  REGARD         1
UVVM:                TB_ERROR     :  REGARD         1
UVVM:                FAILURE      :  REGARD         1
UVVM:                TB_FAILURE   :  REGARD         1
UVVM:      --------------------------------------------------------------------------------------------------------------------------------------------------------------------
UVVM:      
UVVM:      
UVVM:      --------------------------------------------------------------------------------------------------------------------------------------------------------------------
UVVM:      ***  REPORT OF MSG ID PANEL ***
UVVM:      --------------------------------------------------------------------------------------------------------------------------------------------------------------------
UVVM:                ID                             Status
UVVM:                ------------------------       ------
UVVM:                ID_UTIL_BURIED               : DISABLED
UVVM:                ID_BITVIS_DEBUG              : DISABLED
UVVM:                ID_UTIL_SETUP                : ENABLED
UVVM:                ID_LOG_MSG_CTRL              : ENABLED
UVVM:                ID_ALERT_CTRL                : ENABLED
UVVM:                ID_FINISH_OR_STOP            : ENABLED
UVVM:                ID_CLOCK_GEN                 : ENABLED
UVVM:                ID_GEN_PULSE                 : ENABLED
UVVM:                ID_BLOCKING                  : ENABLED
UVVM:                ID_WATCHDOG                  : ENABLED
UVVM:                ID_POS_ACK                   : ENABLED
UVVM:                ID_LOG_HDR                   : ENABLED
UVVM:                ID_LOG_HDR_LARGE             : ENABLED
UVVM:                ID_LOG_HDR_XL                : ENABLED
UVVM:                ID_SEQUENCER                 : ENABLED
UVVM:                ID_SEQUENCER_SUB             : ENABLED
UVVM:                ID_BFM                       : ENABLED
UVVM:                ID_BFM_WAIT                  : ENABLED
UVVM:                ID_BFM_POLL                  : ENABLED
UVVM:                ID_BFM_POLL_SUMMARY          : ENABLED
UVVM:                ID_CHANNEL_BFM               : ENABLED
UVVM:                ID_TERMINATE_CMD             : ENABLED
UVVM:                ID_SEGMENT_INITIATE          : ENABLED
UVVM:                ID_SEGMENT_COMPLETE          : ENABLED
UVVM:                ID_SEGMENT_HDR               : ENABLED
UVVM:                ID_SEGMENT_DATA              : ENABLED
UVVM:                ID_PACKET_INITIATE           : ENABLED
UVVM:                ID_PACKET_PREAMBLE           : ENABLED
UVVM:                ID_PACKET_COMPLETE           : ENABLED
UVVM:                ID_PACKET_HDR                : ENABLED
UVVM:                ID_PACKET_DATA               : ENABLED
UVVM:                ID_PACKET_CHECKSUM           : ENABLED
UVVM:                ID_PACKET_GAP                : ENABLED
UVVM:                ID_FRAME_INITIATE            : ENABLED
UVVM:                ID_FRAME_COMPLETE            : ENABLED
UVVM:                ID_FRAME_HDR                 : ENABLED
UVVM:                ID_FRAME_DATA                : ENABLED
UVVM:                ID_COVERAGE_MAKEBIN          : DISABLED
UVVM:                ID_COVERAGE_ADDBIN           : DISABLED
UVVM:                ID_COVERAGE_ICOVER           : DISABLED
UVVM:                ID_COVERAGE_CONFIG           : ENABLED
UVVM:                ID_COVERAGE_SUMMARY          : ENABLED
UVVM:                ID_COVERAGE_HOLES            : ENABLED
UVVM:                ID_UVVM_SEND_CMD             : ENABLED
UVVM:                ID_UVVM_CMD_ACK              : ENABLED
UVVM:                ID_UVVM_CMD_RESULT           : ENABLED
UVVM:                ID_CMD_INTERPRETER           : ENABLED
UVVM:                ID_CMD_INTERPRETER_WAIT      : ENABLED
UVVM:                ID_IMMEDIATE_CMD             : ENABLED
UVVM:                ID_IMMEDIATE_CMD_WAIT        : ENABLED
UVVM:                ID_CMD_EXECUTOR              : ENABLED
UVVM:                ID_CMD_EXECUTOR_WAIT         : ENABLED
UVVM:                ID_CHANNEL_EXECUTOR          : ENABLED
UVVM:                ID_CHANNEL_EXECUTOR_WAIT     : ENABLED
UVVM:                ID_NEW_HVVC_CMD_SEQ          : ENABLED
UVVM:                ID_INSERTED_DELAY            : ENABLED
UVVM:                ID_OLD_AWAIT_COMPLETION      : ENABLED
UVVM:                ID_AWAIT_COMPLETION          : ENABLED
UVVM:                ID_AWAIT_COMPLETION_LIST     : ENABLED
UVVM:                ID_AWAIT_COMPLETION_WAIT     : ENABLED
UVVM:                ID_AWAIT_COMPLETION_END      : ENABLED
UVVM:                ID_UVVM_DATA_QUEUE           : ENABLED
UVVM:                ID_CONSTRUCTOR               : ENABLED
UVVM:                ID_CONSTRUCTOR_SUB           : ENABLED
UVVM:                ID_VVC_ACTIVITY              : ENABLED
UVVM:                ID_MONITOR                   : ENABLED
UVVM:                ID_MONITOR_ERROR             : ENABLED
UVVM:                ID_DATA                      : ENABLED
UVVM:                ID_CTRL                      : ENABLED
UVVM:                ID_FILE_OPEN_CLOSE           : ENABLED
UVVM:                ID_FILE_PARSER               : ENABLED
UVVM:                ID_SPEC_COV                  : ENABLED
UVVM:      --------------------------------------------------------------------------------------------------------------------------------------------------------------------
UVVM:      
UVVM: ID_WATCHDOG                        0.0 ns  TB seq.                        Starting general watchdog: 8100000 ps. Watchdog A
UVVM: ID_WATCHDOG                        0.0 ns  TB seq.                        Starting general watchdog: 8200000 ps. Watchdog B
UVVM: ID_WATCHDOG                        0.0 ns  TB seq.                        Starting general watchdog: 8300000 ps. Watchdog C
UVVM: ID_WATCHDOG                        0.0 ns  TB seq.                        Starting general watchdog: 100000000 ps. Watchdog D
UVVM: 
UVVM: 
UVVM: ID_LOG_HDR                         1.0 ns  TB seq.                        Verify CLK100M
UVVM: -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
UVVM: ID_CLOCK_GEN                      10.0 ns  TB seq.                        Stopping clock Clk100M_10p_duty
UVVM: ID_CLOCK_GEN                      10.0 ns  TB seq.                        Stopping clock Clk100M_1t_duty
UVVM: ID_CLOCK_GEN                      10.0 ns  TB seq.                        Stopping clock Clk100M_4t_duty
UVVM: ID_CLOCK_GEN                      10.0 ns  TB seq.                        Stopping clock Clk100M
UVVM: ID_CLOCK_GEN                      10.0 ns  TB seq.                        Stopping clock Clk100M_60p_duty
UVVM: ID_CLOCK_GEN                      10.0 ns  TB seq.                        Stopping clock Clk100M_90p_duty
UVVM: ID_CLOCK_GEN                      10.0 ns  TB seq.                        Stopping clock Clk100M_9t_duty
UVVM: ID_POS_ACK                       101.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Check that clock is quiet when disabled'
UVVM: ID_CLOCK_GEN                     101.0 ns  TB seq.                        Starting clock Clk100M_10p_duty
UVVM: ID_CLOCK_GEN                     101.0 ns  TB seq.                        Starting clock Clk100M_1t_duty
UVVM: ID_CLOCK_GEN                     101.0 ns  TB seq.                        Starting clock Clk100M_4t_duty
UVVM: ID_CLOCK_GEN                     101.0 ns  TB seq.                        Starting clock Clk100M
UVVM: ID_CLOCK_GEN                     101.0 ns  TB seq.                        Starting clock Clk100M_60p_duty
UVVM: ID_CLOCK_GEN                     101.0 ns  TB seq.                        Starting clock Clk100M_90p_duty
UVVM: ID_CLOCK_GEN                     101.0 ns  TB seq.                        Starting clock Clk100M_9t_duty
UVVM: ID_POS_ACK                       101.0 ns  TB seq                         await_value(std_logic 1, 0 ns, 10 ns) => OK. Condition occurred after 0 ns. 'Clock generator,
UVVM:                                                                           check that clock started'
UVVM: ID_POS_ACK                       106.0 ns  TB seq                         check_stable() => OK. Stable at 1. 'Clock generator, check clock high duration'
UVVM: ID_POS_ACK                       106.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Clock generator. Check high to low
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       111.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Clock generator, check clock low duration'
UVVM: ID_POS_ACK                       111.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Clock generator. Check low to high
UVVM:                                                                           transition'
UVVM: ID_CLOCK_GEN                     121.0 ns  TB seq.                        Stopping clock Clk100M_10p_duty
UVVM: ID_CLOCK_GEN                     121.0 ns  TB seq.                        Stopping clock Clk100M_1t_duty
UVVM: ID_CLOCK_GEN                     121.0 ns  TB seq.                        Stopping clock Clk100M_4t_duty
UVVM: ID_CLOCK_GEN                     121.0 ns  TB seq.                        Stopping clock Clk100M
UVVM: ID_CLOCK_GEN                     121.0 ns  TB seq.                        Stopping clock Clk100M_60p_duty
UVVM: ID_CLOCK_GEN                     121.0 ns  TB seq.                        Stopping clock Clk100M_90p_duty
UVVM: ID_CLOCK_GEN                     121.0 ns  TB seq.                        Stopping clock Clk100M_9t_duty
UVVM: ID_POS_ACK                       221.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Check that clock actually stopped'
UVVM: 
UVVM: 
UVVM: ID_LOG_HDR                       221.0 ns  TB seq.                        Verify CLK200M
UVVM: -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
UVVM: ID_CLOCK_GEN                     225.0 ns  TB seq.                        Stopping clock Clk200M
UVVM: ID_POS_ACK                       271.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Check that clock is quiet when disabled'
UVVM: ID_CLOCK_GEN                     271.0 ns  TB seq.                        Starting clock Clk200M
UVVM: ID_POS_ACK                       271.0 ns  TB seq                         await_value(std_logic 1, 0 ns, 5 ns) => OK. Condition occurred after 0 ns. 'Clock generator,
UVVM:                                                                           check that clock started'
UVVM: ID_POS_ACK                       273.5 ns  TB seq                         check_stable() => OK. Stable at 1. 'Clock generator, check clock high duration'
UVVM: ID_POS_ACK                       273.5 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Clock generator. Check high to low
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       276.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Clock generator, check clock low duration'
UVVM: ID_POS_ACK                       276.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Clock generator. Check low to high
UVVM:                                                                           transition'
UVVM: ID_CLOCK_GEN                     281.0 ns  TB seq.                        Stopping clock Clk200M
UVVM: ID_POS_ACK                       381.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Check that clock actually stopped'
UVVM: 
UVVM: 
UVVM: ID_LOG_HDR                       381.0 ns  TB seq.                        Verify CLK50M
UVVM: -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
UVVM: ID_POS_ACK                       381.0 ns  TB seq                         await_value(std_logic 1, 0 ns, 11 ns) => OK. Condition occurred after 0 ns. 'Wait until Clk50M
UVVM:                                                                           goes high'
UVVM: ID_POS_ACK                       390.0 ns  TB seq                         await_value(std_logic 0, 0 ns, 11 ns) => OK. Condition occurred after 9 ns. 'Wait until Clk50M
UVVM:                                                                           goes low'
UVVM: ID_POS_ACK                       400.0 ns  TB seq                         await_value(std_logic 1, 0 ns, 20 ns) => OK. Condition occurred after 0 ns. 'Clock generator,
UVVM:                                                                           check that clock started'
UVVM: ID_POS_ACK                       410.0 ns  TB seq                         check_stable() => OK. Stable at 1. 'Clock generator, check clock high duration'
UVVM: ID_POS_ACK                       410.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Clock generator. Check high to low
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       420.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Clock generator, check clock low duration'
UVVM: ID_POS_ACK                       420.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Clock generator. Check low to high
UVVM:                                                                           transition'
UVVM: 
UVVM: 
UVVM: ID_LOG_HDR                       420.0 ns  TB seq.                        Verify Duty Cycles
UVVM: -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
UVVM: ID_CLOCK_GEN                     420.0 ns  TB seq.                        Starting clock Clk100M_10p_duty
UVVM: ID_CLOCK_GEN                     420.0 ns  TB seq.                        Starting clock Clk100M_1t_duty
UVVM: ID_CLOCK_GEN                     420.0 ns  TB seq.                        Starting clock Clk100M_4t_duty
UVVM: ID_CLOCK_GEN                     420.0 ns  TB seq.                        Starting clock Clk100M
UVVM: ID_CLOCK_GEN                     420.0 ns  TB seq.                        Starting clock Clk100M_60p_duty
UVVM: ID_CLOCK_GEN                     420.0 ns  TB seq.                        Starting clock Clk100M_90p_duty
UVVM: ID_CLOCK_GEN                     420.0 ns  TB seq.                        Starting clock Clk100M_9t_duty
UVVM: ID_POS_ACK                       420.0 ns  TB seq                         await_value(std_logic 1, 0 ns, 10 ns) => OK. Condition occurred after 0 ns. 'Clock generator,
UVVM:                                                                           check that clock started'
UVVM: ID_POS_ACK                       426.0 ns  TB seq                         check_stable() => OK. Stable at 1. 'Clock generator, check clock high duration'
UVVM: ID_POS_ACK                       426.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Clock generator. Check high to low
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       430.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Clock generator, check clock low duration'
UVVM: ID_POS_ACK                       430.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Clock generator. Check low to high
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       430.0 ns  TB seq                         await_value(std_logic 1, 0 ns, 10 ns) => OK. Condition occurred after 0 ns. 'Clock generator,
UVVM:                                                                           check that clock started'
UVVM: ID_POS_ACK                       431.0 ns  TB seq                         check_stable() => OK. Stable at 1. 'Clock generator, check clock high duration'
UVVM: ID_POS_ACK                       431.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Clock generator. Check high to low
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       440.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Clock generator, check clock low duration'
UVVM: ID_POS_ACK                       440.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Clock generator. Check low to high
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       440.0 ns  TB seq                         await_value(std_logic 1, 0 ns, 10 ns) => OK. Condition occurred after 0 ns. 'Clock generator,
UVVM:                                                                           check that clock started'
UVVM: ID_POS_ACK                       449.0 ns  TB seq                         check_stable() => OK. Stable at 1. 'Clock generator, check clock high duration'
UVVM: ID_POS_ACK                       449.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Clock generator. Check high to low
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       450.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Clock generator, check clock low duration'
UVVM: ID_POS_ACK                       450.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Clock generator. Check low to high
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       450.0 ns  TB seq                         await_value(std_logic 1, 0 ns, 10 ns) => OK. Condition occurred after 0 ns. 'Clock generator,
UVVM:                                                                           check that clock started'
UVVM: ID_POS_ACK                       456.0 ns  TB seq                         check_stable() => OK. Stable at 1. 'Clock generator, check clock high duration'
UVVM: ID_POS_ACK                       456.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Clock generator. Check high to low
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       460.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Clock generator, check clock low duration'
UVVM: ID_POS_ACK                       460.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Clock generator. Check low to high
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       460.0 ns  TB seq                         await_value(std_logic 1, 0 ns, 10 ns) => OK. Condition occurred after 0 ns. 'Clock generator,
UVVM:                                                                           check that clock started'
UVVM: ID_POS_ACK                       461.0 ns  TB seq                         check_stable() => OK. Stable at 1. 'Clock generator, check clock high duration'
UVVM: ID_POS_ACK                       461.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Clock generator. Check high to low
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       470.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Clock generator, check clock low duration'
UVVM: ID_POS_ACK                       470.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Clock generator. Check low to high
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       470.0 ns  TB seq                         await_value(std_logic 1, 0 ns, 10 ns) => OK. Condition occurred after 0 ns. 'Clock generator,
UVVM:                                                                           check that clock started'
UVVM: ID_POS_ACK                       479.0 ns  TB seq                         check_stable() => OK. Stable at 1. 'Clock generator, check clock high duration'
UVVM: ID_POS_ACK                       479.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Clock generator. Check high to low
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       480.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Clock generator, check clock low duration'
UVVM: ID_POS_ACK                       480.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Clock generator. Check low to high
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       480.0 ns  TB seq                         await_value(std_logic 1, 0 ns, 10 ns) => OK. Condition occurred after 0 ns. 'Clock generator,
UVVM:                                                                           check that clock started'
UVVM: ID_POS_ACK                       484.0 ns  TB seq                         check_stable() => OK. Stable at 1. 'Clock generator, check clock high duration'
UVVM: ID_POS_ACK                       484.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Clock generator. Check high to low
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       490.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Clock generator, check clock low duration'
UVVM: ID_POS_ACK                       490.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Clock generator. Check low to high
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       490.0 ns  TB seq                         await_value(std_logic 1, 0 ns, 10 ns) => OK. Condition occurred after 0 ns. 'Clock generator,
UVVM:                                                                           check that clock started'
UVVM: ID_POS_ACK                       491.0 ns  TB seq                         check_stable() => OK. Stable at 1. 'Clock generator, check clock high duration'
UVVM: ID_POS_ACK                       491.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Clock generator. Check high to low
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       500.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Clock generator, check clock low duration'
UVVM: ID_POS_ACK                       500.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Clock generator. Check low to high
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       500.0 ns  TB seq                         await_value(std_logic 1, 0 ns, 10 ns) => OK. Condition occurred after 0 ns. 'Clock generator,
UVVM:                                                                           check that clock started'
UVVM: ID_POS_ACK                       509.0 ns  TB seq                         check_stable() => OK. Stable at 1. 'Clock generator, check clock high duration'
UVVM: ID_POS_ACK                       509.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Clock generator. Check high to low
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       510.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Clock generator, check clock low duration'
UVVM: ID_POS_ACK                       510.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Clock generator. Check low to high
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       510.0 ns  TB seq                         await_value(std_logic 1, 0 ns, 10 ns) => OK. Condition occurred after 0 ns. 'Clock generator,
UVVM:                                                                           check that clock started'
UVVM: ID_POS_ACK                       514.0 ns  TB seq                         check_stable() => OK. Stable at 1. 'Clock generator, check clock high duration'
UVVM: ID_POS_ACK                       514.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Clock generator. Check high to low
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       520.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Clock generator, check clock low duration'
UVVM: ID_POS_ACK                       520.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Clock generator. Check low to high
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       520.0 ns  TB seq                         await_value(std_logic 1, 0 ns, 10 ns) => OK. Condition occurred after 0 ns. 'Clock generator,
UVVM:                                                                           check that clock started'
UVVM: ID_POS_ACK                       521.0 ns  TB seq                         check_stable() => OK. Stable at 1. 'Clock generator, check clock high duration'
UVVM: ID_POS_ACK                       521.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Clock generator. Check high to low
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       530.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Clock generator, check clock low duration'
UVVM: ID_POS_ACK                       530.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Clock generator. Check low to high
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       530.0 ns  TB seq                         await_value(std_logic 1, 0 ns, 10 ns) => OK. Condition occurred after 0 ns. 'Clock generator,
UVVM:                                                                           check that clock started'
UVVM: ID_POS_ACK                       539.0 ns  TB seq                         check_stable() => OK. Stable at 1. 'Clock generator, check clock high duration'
UVVM: ID_POS_ACK                       539.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Clock generator. Check high to low
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                       540.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Clock generator, check clock low duration'
UVVM: ID_POS_ACK                       540.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Clock generator. Check low to high
UVVM:                                                                           transition'
UVVM: 
UVVM: 
UVVM: ID_LOG_HDR                       540.0 ns  TB seq.                        Verify Adjustable_CLK100M
UVVM: -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
UVVM: ID_POS_ACK                       640.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Check that adjustable clock is quiet when disabled'
UVVM: ID_CLOCK_GEN                     640.0 ns  TB seq.                        Starting clock: adj_clk100M
UVVM: ID_POS_ACK                       645.0 ns  TB seq                         check_value() => OK, for time 5000 ps. 'Checking rising edge.'
UVVM: ID_POS_ACK                       645.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Check that adjustable clock is set to high
UVVM:                                                                           during the period.'
UVVM: ID_POS_ACK                       645.0 ns  TB seq                         check_stable() => OK. Stable at 1. 'Check adjustable clock is stable during high period.'
UVVM: ID_POS_ACK                       650.0 ns  TB seq                         check_value() => OK, for time 5000 ps. 'Checking falling edge.'
UVVM: ID_POS_ACK                       650.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Check that adjustable clock is set to low
UVVM:                                                                           during the period.'
UVVM: ID_POS_ACK                       650.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Check adjustable clock is stable during low period.'
UVVM: ID_CLOCK_GEN                     660.0 ns  TB seq.                        Stopping clock: adj_clk100M
UVVM: ID_CLOCK_GEN                     670.0 ns  TB seq.                        Starting clock: adj_clk100M
UVVM: ID_POS_ACK                       672.5 ns  TB seq                         check_value() => OK, for time 2500 ps. 'Checking rising edge.'
UVVM: ID_POS_ACK                       672.5 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Check that adjustable clock is set to high
UVVM:                                                                           during the period.'
UVVM: ID_POS_ACK                       672.5 ns  TB seq                         check_stable() => OK. Stable at 1. 'Check adjustable clock is stable during high period.'
UVVM: ID_POS_ACK                       680.0 ns  TB seq                         check_value() => OK, for time 7500 ps. 'Checking falling edge.'
UVVM: ID_POS_ACK                       680.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Check that adjustable clock is set to low
UVVM:                                                                           during the period.'
UVVM: ID_POS_ACK                       680.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Check adjustable clock is stable during low period.'
UVVM: ID_CLOCK_GEN                     690.0 ns  TB seq.                        Stopping clock: adj_clk100M
UVVM: ID_CLOCK_GEN                     700.0 ns  TB seq.                        Starting clock: adj_clk100M
UVVM: ID_POS_ACK                       709.9 ns  TB seq                         check_value() => OK, for time 9900 ps. 'Checking rising edge.'
UVVM: ID_POS_ACK                       709.9 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Check that adjustable clock is set to high
UVVM:                                                                           during the period, high: 9900 ps, low: 100 ps'
UVVM: ID_POS_ACK                       709.9 ns  TB seq                         check_stable() => OK. Stable at 1. 'Check adjustable clock is stable during high period, high:
UVVM:                                                                           9900 ps, low: 100 ps'
UVVM: ID_POS_ACK                       710.0 ns  TB seq                         check_value() => OK, for time 100 ps. 'Checking falling edge.'
UVVM: ID_POS_ACK                       710.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Check that adjustable clock is set to low
UVVM:                                                                           during the period, high: 9900 ps, low: 100 ps'
UVVM: ID_POS_ACK                       710.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Check adjustable clock is stable during low period, high:
UVVM:                                                                           9900 ps, low: 100 ps'
UVVM: ID_CLOCK_GEN                     720.0 ns  TB seq.                        Stopping clock: adj_clk100M
UVVM: 
UVVM: 
UVVM: ID_LOG_HDR                       810.0 ns  TB seq.                        Verify Adjustable_CLK100M alert handling
UVVM: -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
UVVM: ID_UTIL_SETUP                    810.0 ns  TB seq.                        incremented expected TB_ERRORs by 2. 
UVVM: ID_CLOCK_GEN                     810.0 ns  TB seq.                        Starting clock: adj_clk100M
UVVM: 
UVVM: =========================================================================================================================================================================
UVVM: ***  TB_ERROR #1  ***
UVVM:           810 ns   TB seq.
UVVM:                    check_value_in_range() => Failed. integer  Was 0. Expected between 1 and 99
UVVM:                    adjustable_clock_generator: parameter clock_high_percentage must be in range 1 to 99!
UVVM: =========================================================================================================================================================================
UVVM: 
UVVM: 
UVVM: ID_CLOCK_GEN                     820.0 ns  TB seq.                        Stopping clock: adj_clk100M
UVVM: ID_CLOCK_GEN                     820.0 ns  TB seq.                        Starting clock: adj_clk100M
UVVM: 
UVVM: =========================================================================================================================================================================
UVVM: ***  TB_ERROR #2  ***
UVVM:           820 ns   TB seq.
UVVM:                    check_value_in_range() => Failed. integer  Was 100. Expected between 1 and 99
UVVM:                    adjustable_clock_generator: parameter clock_high_percentage must be in range 1 to 99!
UVVM: =========================================================================================================================================================================
UVVM: 
UVVM: 
UVVM: ID_CLOCK_GEN                     830.0 ns  TB seq.                        Stopping clock: adj_clk100M
UVVM: ID_CLOCK_GEN                     830.0 ns  TB seq.                        Starting clock: adj_clk100M
UVVM: ID_CLOCK_GEN                     850.0 ns  TB seq.                        Stopping clock: adj_clk100M
UVVM: ID_CLOCK_GEN                     900.0 ns  TB seq.                        Stopping clock Clk10M_1p_duty
UVVM: ID_CLOCK_GEN                     900.0 ns  TB seq.                        Stopping clock Clk10M_1p_duty
UVVM: ID_CLOCK_GEN                     900.0 ns  TB seq.                        Stopping clock Clk10M_1t_duty
UVVM: ID_CLOCK_GEN                     900.0 ns  TB seq.                        Stopping clock Clk10M_99p_duty
UVVM: ID_CLOCK_GEN                     900.0 ns  TB seq.                        Stopping clock Clk10M_99t_duty
UVVM: ID_CLOCK_GEN                    1840.0 ns  TB seq.                        Starting clock Clk10M_1p_duty
UVVM: ID_CLOCK_GEN                    1840.0 ns  TB seq.                        Starting clock Clk10M_1p_duty
UVVM: ID_CLOCK_GEN                    1840.0 ns  TB seq.                        Starting clock Clk10M_1t_duty
UVVM: ID_CLOCK_GEN                    1840.0 ns  TB seq.                        Starting clock Clk10M_99p_duty
UVVM: ID_CLOCK_GEN                    1840.0 ns  TB seq.                        Starting clock Clk10M_99t_duty
UVVM: ID_POS_ACK                      1840.0 ns  TB seq                         await_value(std_logic 1, 0 ns, 100 ns) => OK. Condition occurred after 0 ns. 'Clock generator,
UVVM:                                                                           check that clock started'
UVVM: ID_POS_ACK                      1939.0 ns  TB seq                         check_stable() => OK. Stable at 1. 'Clock generator, check clock high duration'
UVVM: ID_POS_ACK                      1939.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Clock generator. Check high to low
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                      1940.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Clock generator, check clock low duration'
UVVM: ID_POS_ACK                      1940.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Clock generator. Check low to high
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                      1940.0 ns  TB seq                         await_value(std_logic 1, 0 ns, 100 ns) => OK. Condition occurred after 0 ns. 'Clock generator,
UVVM:                                                                           check that clock started'
UVVM: ID_POS_ACK                      1941.0 ns  TB seq                         check_stable() => OK. Stable at 1. 'Clock generator, check clock high duration'
UVVM: ID_POS_ACK                      1941.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Clock generator. Check high to low
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                      2040.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Clock generator, check clock low duration'
UVVM: ID_POS_ACK                      2040.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Clock generator. Check low to high
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                      2040.0 ns  TB seq                         await_value(std_logic 1, 0 ns, 100 ns) => OK. Condition occurred after 0 ns. 'Clock generator,
UVVM:                                                                           check that clock started'
UVVM: ID_POS_ACK                      2139.0 ns  TB seq                         check_stable() => OK. Stable at 1. 'Clock generator, check clock high duration'
UVVM: ID_POS_ACK                      2139.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Clock generator. Check high to low
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                      2140.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Clock generator, check clock low duration'
UVVM: ID_POS_ACK                      2140.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Clock generator. Check low to high
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                      2140.0 ns  TB seq                         await_value(std_logic 1, 0 ns, 100 ns) => OK. Condition occurred after 0 ns. 'Clock generator,
UVVM:                                                                           check that clock started'
UVVM: ID_POS_ACK                      2141.0 ns  TB seq                         check_stable() => OK. Stable at 1. 'Clock generator, check clock high duration'
UVVM: ID_POS_ACK                      2141.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Clock generator. Check high to low
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                      2240.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Clock generator, check clock low duration'
UVVM: ID_POS_ACK                      2240.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Clock generator. Check low to high
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                      2240.0 ns  TB seq                         await_value(std_logic 1, 0 ns, 100 ns) => OK. Condition occurred after 0 ns. 'Clock generator,
UVVM:                                                                           check that clock started'
UVVM: ID_POS_ACK                      2339.0 ns  TB seq                         check_stable() => OK. Stable at 1. 'Clock generator, check clock high duration'
UVVM: ID_POS_ACK                      2339.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Clock generator. Check high to low
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                      2340.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Clock generator, check clock low duration'
UVVM: ID_POS_ACK                      2340.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Clock generator. Check low to high
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                      2340.0 ns  TB seq                         await_value(std_logic 1, 0 ns, 100 ns) => OK. Condition occurred after 0 ns. 'Clock generator,
UVVM:                                                                           check that clock started'
UVVM: ID_POS_ACK                      2341.0 ns  TB seq                         check_stable() => OK. Stable at 1. 'Clock generator, check clock high duration'
UVVM: ID_POS_ACK                      2341.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Clock generator. Check high to low
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                      2440.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Clock generator, check clock low duration'
UVVM: ID_POS_ACK                      2440.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Clock generator. Check low to high
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                      2440.0 ns  TB seq                         await_value(std_logic 1, 0 ns, 100 ns) => OK. Condition occurred after 0 ns. 'Clock generator,
UVVM:                                                                           check that clock started'
UVVM: ID_POS_ACK                      2539.0 ns  TB seq                         check_stable() => OK. Stable at 1. 'Clock generator, check clock high duration'
UVVM: ID_POS_ACK                      2539.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Clock generator. Check high to low
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                      2540.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Clock generator, check clock low duration'
UVVM: ID_POS_ACK                      2540.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Clock generator. Check low to high
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                      2540.0 ns  TB seq                         await_value(std_logic 1, 0 ns, 100 ns) => OK. Condition occurred after 0 ns. 'Clock generator,
UVVM:                                                                           check that clock started'
UVVM: ID_POS_ACK                      2541.0 ns  TB seq                         check_stable() => OK. Stable at 1. 'Clock generator, check clock high duration'
UVVM: ID_POS_ACK                      2541.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'Clock generator. Check high to low
UVVM:                                                                           transition'
UVVM: ID_POS_ACK                      2640.0 ns  TB seq                         check_stable() => OK. Stable at 0. 'Clock generator, check clock low duration'
UVVM: ID_POS_ACK                      2640.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'Clock generator. Check low to high
UVVM:                                                                           transition'
UVVM: ID_GEN_PULSE                    2700.0 ns  TB seq.                        Pulsed to 1 for 50000 ps. 'test pulse 50 ns, blocking'
UVVM: ID_POS_ACK                      2700.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'pulse generator, blocking mode, pulse done'
UVVM: ID_GEN_PULSE                    2851.0 ns  TB seq.                        Pulsed to 1 for 51000 ps. 'test pulse 50 ns, blocking by default'
UVVM: ID_POS_ACK                      2851.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'pulse generator, blocking mode by default,
UVVM:                                                                           pulse done'
UVVM: ID_GEN_PULSE                    2951.0 ns  TB seq.                        Pulsed to 1 for 0 ps. 'Pulse for a delta cycle'
UVVM: ID_POS_ACK                      2951.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'pulse for 0 ns, blocking mode, pulse done'
UVVM: ID_POS_ACK                      2951.0 ns  TB seq                         check_value() => OK, for time 0 ps. 'pulse for 0 ns. Check that it actually pulsed for a delta
UVVM:                                                                           cycle'
UVVM: ID_POS_ACK                      2951.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'pulse for 0 ns, check that it actually
UVVM:                                                                           pulsed for a delta cycle'
UVVM: ID_GEN_PULSE                    3051.0 ns  TB seq.                        Pulsed to 1 for 50000 ps. 'Pulse non_blocking'
UVVM: ID_POS_ACK                      3051.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'pulse generator, start of high period'
UVVM: ID_POS_ACK                      3101.0 ns  TB seq                         await_value(std_logic 0, 50 ns, 50 ns) => OK. Condition occurred after 50 ns. 'Pulse generator,
UVVM:                                                                           end of high period'
UVVM: ID_GEN_PULSE                    3205.0 ns  TB seq.                        Pulsed to 1 for 10 clk cycles. 'Test pulse 10 clk periods'
UVVM: ID_POS_ACK                      3205.0 ns  TB seq.                        check_value() => OK, for time 100000 ps. 'Check start of pulse'
UVVM: ID_POS_ACK                      3205.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'pulse for 10 clk periods, pulse done'
UVVM: ID_POS_ACK                      3205.0 ns  TB seq                         check_value() => OK, for time 0 ps. 'pulse for 10 clk periods. Check that it actually pulsed
UVVM:                                                                           for a delta cycle'
UVVM: ID_POS_ACK                      3205.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'pulse for 10 clk periods, check that it
UVVM:                                                                           actually pulsed for a delta cycle'
UVVM: ID_UTIL_SETUP                   3305.0 ns  TB seq.                        incremented expected TB_ERRORs by 1. 
UVVM: 
UVVM: =========================================================================================================================================================================
UVVM: ***  TB_ERROR #3  ***
UVVM:          3305 ns   TB seq.
UVVM:                    check_value() => Failed. Boolean was false. 'gen_pulse: target was already 0. 'Test pulse sl with same value as it was before''
UVVM: =========================================================================================================================================================================
UVVM: 
UVVM: 
UVVM: ID_GEN_PULSE                    3355.0 ns  TB seq.                        Pulsed to 0 for 50000 ps. 'Test pulse sl with same value as it was before'
UVVM: ID_POS_ACK                      3355.0 ns  TB seq.                        check_value() => OK, for std_logic '0' (exp: '0'). 'Check the value after the pulse'
UVVM: ID_GEN_PULSE                    3405.0 ns  TB seq.                        Pulsed to 1 for 50000 ps. 'Test pulse sl '
UVVM: ID_POS_ACK                      3405.0 ns  TB seq.                        check_value() => OK, for std_logic 'L' (exp: 'L'). 'Check the value after the pulse'
UVVM: ID_GEN_PULSE                    3435.0 ns  TB seq.                        Pulsed to x"AB" for 2 clk cycles. 'Test pulse slv defined as 'to' for 2 clks'
UVVM: ID_POS_ACK                      3435.0 ns  TB seq.                        check_value() => OK, for time 20000 ps. 'Check start of pulse'
UVVM: ID_POS_ACK                      3435.0 ns  TB seq.                        check_value() => OK, for time 0 ps. 'Check pulse is just done'
UVVM: ID_POS_ACK                      3435.0 ns  TB seq.                        check_value() => OK, for slv x"AB"'. 'Check what the value was during the pulse'
UVVM: ID_POS_ACK                      3435.0 ns  TB seq.                        check_value() => OK, for slv x"00"'. 'Check the value after the pulse'
UVVM: ID_GEN_PULSE                    3465.0 ns  TB seq.                        Pulsed to x"AB" for 2 clk cycles. 'Test pulse slv defined as 'downto' for 2 clks'
UVVM: ID_POS_ACK                      3465.0 ns  TB seq.                        check_value() => OK, for time 20000 ps. 'Check start of pulse'
UVVM: ID_POS_ACK                      3465.0 ns  TB seq.                        check_value() => OK, for time 0 ps. 'Check pulse is just done'
UVVM: ID_POS_ACK                      3465.0 ns  TB seq.                        check_value() => OK, for slv x"AB"'. 'Check what the value was during the pulse'
UVVM: ID_POS_ACK                      3465.0 ns  TB seq.                        check_value() => OK, for slv x"00"'. 'Check the value after the pulse'
UVVM: ID_GEN_PULSE                    3495.0 ns  TB seq.                        Pulsed to x"X6" for 2 clk cycles. 'Test pulse slv defined as 'to' with don't care for 2 clks'
UVVM: ID_POS_ACK                      3495.0 ns  TB seq.                        check_value() => OK, for time 20000 ps. 'Check start of pulse'
UVVM: ID_POS_ACK                      3495.0 ns  TB seq.                        check_value() => OK, for time 0 ps. 'Check pulse is just done'
UVVM: ID_POS_ACK                      3495.0 ns  TB seq.                        check_value() => OK, for slv x"F6"'. 'Check what the value was during the pulse'
UVVM: ID_POS_ACK                      3495.0 ns  TB seq.                        check_value() => OK, for slv x"FF"'. 'Check the value after the pulse'
UVVM: ID_GEN_PULSE                    3525.0 ns  TB seq.                        Pulsed to x"XX" for 2 clk cycles. 'Test pulse slv defined as 'downto' with don't care for 2
UVVM:                                                                           clks'
UVVM: ID_POS_ACK                      3525.0 ns  TB seq.                        check_value() => OK, for time 20000 ps. 'Check start of pulse'
UVVM: ID_POS_ACK                      3525.0 ns  TB seq.                        check_value() => OK, for time 0 ps. 'Check pulse is just done'
UVVM: ID_POS_ACK                      3525.0 ns  TB seq.                        check_value() => OK, for slv x"99"'. 'Check what the value was during the pulse'
UVVM: ID_POS_ACK                      3525.0 ns  TB seq.                        check_value() => OK, for slv x"CC"'. 'Check the value after the pulse'
UVVM: ID_GEN_PULSE                    3555.0 ns  TB seq.                        Pulsed to x"XX" for 2 clk cycles. 'Test pulse slv defined as 'to' for 2 clks'
UVVM: ID_POS_ACK                      3555.0 ns  TB seq.                        check_value() => OK, for time 20000 ps. 'Check start of pulse'
UVVM: ID_POS_ACK                      3555.0 ns  TB seq.                        check_value() => OK, for time 0 ps. 'Check pulse is just done'
UVVM: ID_POS_ACK                      3555.0 ns  TB seq.                        check_value() => OK, for slv x"55"'. 'Check what the value was during the pulse'
UVVM: ID_POS_ACK                      3555.0 ns  TB seq.                        check_value() => OK, for slv x"FF"'. 'Check the value after the pulse'
UVVM: ID_GEN_PULSE                    3585.0 ns  TB seq.                        Pulsed to x"FF" for 2 clk cycles. 'Test pulse slv defined as 'to' for 2 clks'
UVVM: ID_POS_ACK                      3585.0 ns  TB seq.                        check_value() => OK, for time 20000 ps. 'Check start of pulse'
UVVM: ID_POS_ACK                      3585.0 ns  TB seq.                        check_value() => OK, for time 0 ps. 'Check pulse is just done'
UVVM: ID_POS_ACK                      3585.0 ns  TB seq.                        check_value() => OK, for slv x"FF"'. 'Check what the value was during the pulse'
UVVM: ID_POS_ACK                      3585.0 ns  TB seq.                        check_value() => OK, for slv x"23"'. 'Check the value after the pulse'
UVVM: ID_GEN_PULSE                    3615.0 ns  TB seq.                        Pulsed to x"FF" for 2 clk cycles. 'Test pulse slv for 2 clks'
UVVM: ID_POS_ACK                      3615.0 ns  TB seq.                        check_value() => OK, for time 20000 ps. 'Check start of pulse'
UVVM: ID_POS_ACK                      3615.0 ns  TB seq.                        check_value() => OK, for time 0 ps. 'Check pulse is just done'
UVVM: ID_POS_ACK                      3615.0 ns  TB seq.                        check_value() => OK, for slv x"FF"'. 'Check what the value was during the pulse'
UVVM: ID_POS_ACK                      3615.0 ns  TB seq.                        check_value() => OK, for slv x"23"'. 'Check the value after the pulse'
UVVM: ID_UTIL_SETUP                   3715.0 ns  TB seq.                        incremented expected TB_ERRORs by 1. 
UVVM: 
UVVM: =========================================================================================================================================================================
UVVM: ***  TB_ERROR #4  ***
UVVM:          3715 ns   TB seq.
UVVM:                    check_value() => Failed. Boolean was false. 'gen_pulse: target was already 1. 'Test pulse sl to a value it was already.''
UVVM: =========================================================================================================================================================================
UVVM: 
UVVM: 
UVVM: ID_GEN_PULSE                    3725.0 ns  TB seq.                        Pulsed to 1 for 10000 ps. 'Test pulse sl to a value it was already.'
UVVM: ID_POS_ACK                      3725.0 ns  TB seq.                        check_value() => OK, for std_logic '1' (exp: '1'). 'Check what the value was during the pulse.'
UVVM: ID_POS_ACK                      3725.0 ns  TB seq.                        check_value() => OK, for std_logic '1' (exp: '1'). 'Check what the value was after the pulse'
UVVM: ID_SEQUENCER                    3825.0 ns  (non scoped)                   Check that gen_pulse() outputs TB_ERROR for combination NON_BLOCKING + 0 ns duration
UVVM: ID_UTIL_SETUP                   3825.0 ns  TB seq.                        incremented expected TB_ERRORs by 1. 
UVVM: 
UVVM: =========================================================================================================================================================================
UVVM: ***  TB_ERROR #5  ***
UVVM:          3825 ns   TB seq.
UVVM:                    check_value() => Failed. Boolean was false. 'gen_pulse: The combination of NON_BLOCKING mode and 0 ns pulse duration results in the pulse being
UVVM:                    ignored.'
UVVM: =========================================================================================================================================================================
UVVM: 
UVVM: 
UVVM: ID_GEN_PULSE                    3825.0 ns  TB seq.                        Pulsed to 1 for 0 ps. 'NON_BLOCKING pulse for a delta cycle (0 ns)'
UVVM: ID_POS_ACK                      3825.0 ns  TB seq                         check_value() => OK, for std_logic '0' (exp: '0'). 'pulse for 0 ns, blocking mode, pulse done'
UVVM: ID_POS_ACK                      3825.0 ns  TB seq                         check_value() => OK, for time 0 ps. 'pulse for 0 ns. Check that it actually pulsed for a delta
UVVM:                                                                           cycle'
UVVM: ID_POS_ACK                      3825.0 ns  TB seq                         check_value() => OK, for std_logic '1' (exp: '1'). 'pulse for 0 ns, check that it actually
UVVM:                                                                           pulsed for a delta cycle'
UVVM:      
UVVM:      ====================================================================================================================================================================
UVVM:      *** INTERMEDIATE SUMMARY OF ALL ALERTS ***
UVVM:      ====================================================================================================================================================================
UVVM:                                REGARDED   EXPECTED  IGNORED      Comment?
UVVM:                NOTE         :      0         0         0         ok
UVVM:                TB_NOTE      :      0         0         0         ok
UVVM:                WARNING      :      0         0         0         ok
UVVM:                TB_WARNING   :      0         0         0         ok
UVVM:                MANUAL_CHECK :      0         0         0         ok
UVVM:                ERROR        :      0         0         0         ok
UVVM:                TB_ERROR     :      5         5         0         ok
UVVM:                FAILURE      :      0         0         0         ok
UVVM:                TB_FAILURE   :      0         0         0         ok
UVVM:      ====================================================================================================================================================================
UVVM:      
UVVM:      
UVVM:      ====================================================================================================================================================================
UVVM:      *** FINAL SUMMARY OF ALL ALERTS ***
UVVM:      ====================================================================================================================================================================
UVVM:                                REGARDED   EXPECTED  IGNORED      Comment?
UVVM:                NOTE         :      0         0         0         ok
UVVM:                TB_NOTE      :      0         0         0         ok
UVVM:                WARNING      :      0         0         0         ok
UVVM:                TB_WARNING   :      0         0         0         ok
UVVM:                MANUAL_CHECK :      0         0         0         ok
UVVM:                ERROR        :      0         0         0         ok
UVVM:                TB_ERROR     :      5         5         0         ok
UVVM:                FAILURE      :      0         0         0         ok
UVVM:                TB_FAILURE   :      0         0         0         ok
UVVM:      ====================================================================================================================================================================
UVVM:      >> Simulation SUCCESS: No mismatch between counted and expected serious alerts
UVVM:      ====================================================================================================================================================================
UVVM:      
UVVM:      
UVVM: 
UVVM: 
UVVM: ID_LOG_HDR                      4925.0 ns  TB seq                         SIMULATION COMPLETED
UVVM: -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
